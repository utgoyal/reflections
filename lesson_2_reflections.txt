What happens when you initialize a repository? Why do you need to do it?

A .git file is created indicating the initialization of the repository and this is required to keep track of all the commits that we make in our files

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area acts as an intermediate between the current working directory and the repository. It gives user more flexibility. we can reset the staging area if we accidentaly added a file to it.

How can you use the staging area to make sure you have one commit per logical change?
we can use the git diff command without any parameters to find the differences between 
our staging area file and the working directory. This helps us understand how many changes
have been made to the file in the working directory, this happens before we use the git add
command to add the modified file into the staging area

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Sometimes when we need to try a new feature and do not want to affect the program as a whole we create
new branches, these branches help us test out new features separately, in the end we can merge the two
branches if we are ready to deploy that change

How do the diagrams help you visualize the branch structure?
Diagrams help us understand the co relation between the various commits and branches. We can 
use diagrams to understand what commit was the last one when a particular branch was created
this helps us understand the changes that have or have not been implemented in a branch

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result of merging two branches is that the code that was already present in the two branches
parent file but not deleted by either will remain the same. The code deleted by either branch
will get deleted and the code that is new to either branch will be included.